version: '3.8'

services:
  nextjs:
    build:
      context: .
    container_name: nextjs_app
    environment:
      NODE_ENV: production
      SECRET_KEY: secret-auth-key
      POSTGRES_URL: postgresql://postgres:dev@postgres:5432/AuthApp
    ports:
      - 3006:3000
    depends_on:
      - postgres
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  postgres:
    image: postgres:13.2
    restart: always
    container_name: postgres_db
    environment:
      POSTGRES_DB: authApp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass123
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt

